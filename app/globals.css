@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.75rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  html {
    scroll-behavior: smooth;
  }
  body {
    @apply bg-background text-foreground antialiased;
  }
}


/* Typography defaults */
.prose {
  @apply prose-neutral dark:prose-invert max-w-none;
}

/* Syntax highlighting (rehype-pretty-code) */
/* Hide all theme variants by default */
[data-rehype-pretty-code-figure] code,
[data-rehype-pretty-code-fragment] code {
  display: none;
}

/* Show only the code node that matches the active theme */
html:not(.dark) [data-rehype-pretty-code-figure] code[data-theme*='light'],
html:not(.dark) [data-rehype-pretty-code-fragment] code[data-theme*='light'] {
  display: grid;
}

.dark [data-rehype-pretty-code-figure] code[data-theme*='dark'],
.dark [data-rehype-pretty-code-fragment] code[data-theme*='dark'] {
  display: grid;
}

/* Code block container styling */
[data-rehype-pretty-code-figure] pre,
[data-rehype-pretty-code-fragment] pre {
  background: var(--shiki-color-background) !important;
  color: var(--shiki-color-text) !important;
  border: 1px solid hsl(var(--border));
  border-radius: var(--radius);
  padding: 0.75rem 1rem;
  overflow-x: auto;
}

/* If the plugin emits <figure><code> without a <pre>, treat <code> as the container */
[data-rehype-pretty-code-figure] > code,
[data-rehype-pretty-code-fragment] > code {
  background: var(--shiki-color-background) !important;
  color: var(--shiki-color-text) !important;
  border: 1px solid hsl(var(--border));
  border-radius: var(--radius);
  padding: 0.75rem 1rem;
  display: grid;
  overflow-x: auto;
}

/* Force the dark theme palette even in light mode (site design choice) */
html:not(.dark) [data-rehype-pretty-code-figure] pre,
html:not(.dark) [data-rehype-pretty-code-fragment] pre,
html:not(.dark) [data-rehype-pretty-code-figure] > code,
html:not(.dark) [data-rehype-pretty-code-fragment] > code {
  --shiki-color-background: #000000;
  --shiki-color-text: #f8fafc;
  background: #000000 !important;
  color: #f8fafc !important;
  border-color: rgba(255, 255, 255, 0.08);
}

/* Map token variables to actual colors */
html:not(.dark) [data-rehype-pretty-code-figure] span[style*='--shiki-'],
html:not(.dark) [data-rehype-pretty-code-fragment] span[style*='--shiki-'] {
  color: var(--shiki-light);
}

.dark [data-rehype-pretty-code-figure] span[style*='--shiki-'],
.dark [data-rehype-pretty-code-fragment] span[style*='--shiki-'] {
  color: var(--shiki-dark);
}

/* Code lines */
[data-rehype-pretty-code-figure] [data-line],
[data-rehype-pretty-code-fragment] [data-line] {
  padding-inline: 0.25rem;
}

/* Highlighted lines */
[data-rehype-pretty-code-figure] [data-highlighted-line],
[data-rehype-pretty-code-fragment] [data-highlighted-line] {
  /* Fallback */
  background: hsl(var(--accent) / 0.12);
  /* Better contrast if supported */
  background: color-mix(in oklab, var(--shiki-color-background) 85%, hsl(var(--accent)) 15%);
  border-left: 2px solid hsl(var(--accent-foreground));
}

/* Inline code (non-pre) */
:not(pre) > code {
  background: hsl(var(--muted));
  color: hsl(var(--foreground));
  border: 1px solid hsl(var(--border));
  border-radius: 0.375rem;
  padding: 0.125rem 0.375rem;
}

@layer components {
  /* Inline code chips (not inside <pre>) */
  .prose :where(code):not(:where(pre code)) {
    @apply rounded bg-muted px-1 py-0.5;
  }

  /* Inside code blocks: no chip background, let the <pre> control colors */
  .prose :where(pre code),
  [data-rehype-pretty-code-figure] pre code,
  [data-rehype-pretty-code-fragment] pre code,
  [data-rehype-pretty-code-figure] > code,
  [data-rehype-pretty-code-fragment] > code {
    background: transparent !important;
    border-radius: 0 !important;
    padding: 0 !important;
  }

  /* Fallback styling for <pre><code> blocks NOT processed by rehype-pretty-code */
  .prose :where(pre):not(:where([data-rehype-pretty-code-figure] pre, [data-rehype-pretty-code-fragment] pre)) {
    @apply rounded-lg border border-slate-200 bg-white p-4 text-slate-900;
  }
  .dark .prose :where(pre):not(:where([data-rehype-pretty-code-figure] pre, [data-rehype-pretty-code-fragment] pre)) {
    @apply border-zinc-800 bg-zinc-950 text-zinc-100;
  }
}


/* Print styles */
@media print {
  @page {
    size: A4;
    margin: 12mm;
  }

  html {
    font-size: 12pt;
  }

  body {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
  }

  /* Hide chrome that isn't part of the printed content */
  .no-print {
    display: none !important;
  }

  /* Remove heavy decoration */
  * {
    box-shadow: none !important;
    text-shadow: none !important;
    background-image: none !important;
  }

  /* Avoid page breaks inside important blocks */
  h1, h2, h3, .prose h1, .prose h2, .prose h3 {
    break-after: avoid;
  }
  section, article, header {
    break-inside: avoid;
  }
}
