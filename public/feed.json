{
    "version": "https://jsonfeed.org/version/1",
    "title": "Personal Site",
    "home_page_url": "https://example.com",
    "feed_url": "https://example.com/feed.json",
    "description": "Clean, fast personal site built with Next.js",
    "author": {
        "name": "Nassim Arifette",
        "url": "https://example.com"
    },
    "items": [
        {
            "id": "https://example.com/blog/field-notes-2025-ideas",
            "content_html": "\nTwo bugs broke my RAG system last month. The first was self‑inflicted—I nudged top‑k from 8 to 16 “for coverage” and watched answers get longer and less faithful. The second came from a knowledge base that contradicted itself; my agent cheerfully averaged the disagreement into nonsense. These weren’t model problems. They were system problems. And they pushed me into a week‑long rabbit hole of 2025 papers that, together, changed how I build.\n\nBelow is a narrative of what I learned. It’s not a survey; it’s a lab notebook. I’ll explain the idea, link the paper, and show the exact tweak I made. No hype, just the pieces that actually moved the needle.\n\n---\n\n## 1) How many passages should we stuff into context?\n\nOn Tuesday, I read Guo et al. (2025), who frame RAG as noisy in‑context learning and—finally—give finite‑sample risk bounds for the context you feed the LLM. The moral is refreshingly simple: each passage is an example; more examples add both signal and noise; there’s a bias–variance trade‑off; there’s a sweet spot.\n\nPaper: Retrieval‑Augmented Generation as Noisy In‑Context Learning: A Unified Theory and Risk Bounds, Guo et al., 2025 — [arXiv](https://arxiv.org/abs/2506.03100) · [HTML](https://arxiv.org/html/2506.03100v1)\n\nI stopped hard‑coding top‑k. Instead, I scored each candidate passage for “noisiness” (age, domain mismatch, lexical mismatch) and let a tiny controller pick k per query.\n\n```python\n# a 20‑line controller that paid for itself in a day\nfrom math import exp\n\ndef choose_k(passages, min_k=4, max_k=12):\n    # passages: list of dicts with noise features in [0,1]\n    # heuristic risk ~ noise_mean + noise_var; lower risk → larger k\n    ns = [0.5*p['age'] + 0.3*p['domain_mismatch'] + 0.2*p['lex_mismatch'] for p in passages]\n    mu = sum(ns)/len(ns); var = sum((x-mu)**2 for x in ns)/len(ns)\n    risk = 0.7*mu + 0.3*var\n    # map risk→k with a smooth squashing; tune constants on logs, not vibes\n    frac = 1.0/(1.0 + exp(8*(risk-0.35)))  # center at ~0.35\n    return int(min_k + frac*(max_k-min_k))\n```\n\nIn my logs, this shaved ~12–18% tokens per answer and reduced “contradiction with sources” flags. More importantly: answers felt calmer. The model wasn’t drowning in barely‑relevant context anymore.\n\n---\n\n## 2) What if the evidence fights itself?\n\nMid‑week, a teammate sent me RAMDocs—a dataset where queries meet ambiguity, noise, and misinformation all at once. The accompanying method MADAM‑RAG uses a light, debate‑style agent setup that asks small critics to surface conflicts before we synthesize.\n\nPaper & data: Retrieval‑Augmented Generation with Conflicting Evidence — Wang et al., 2025 — [arXiv](https://arxiv.org/abs/2504.13079) · RAMDocs code: [GitHub](https://github.com/HanNight/RAMDocs)\n\nI borrowed the spirit, not the letter. After retrieval, I spawn two quick “voices”: one tries to resolve ambiguity (which entity/date/formula do we mean?), the other tries to flag misinformation (does any passage contradict the rest?). Only then do I ask the main model to answer, explicitly citing the sub‑conclusions.\n\nThe effect is subtle but real: fewer confident wrong answers when the corpus disagrees with itself, and clearer “here are the two plausible interpretations” when things are genuinely ambiguous.\n\n---\n\n## 3) Train the process, not just the outcome\n\nMost of my failures start before generation: poor query rewriting, bad retriever choice, premature stopping. Leng et al. (2025) propose DecEx‑RAG, which treats agentic RAG as a tiny MDP—Decision (what/when to retrieve) then Execution (how to use it)—and adds process supervision so we reward good steps, not just good final answers.\n\nPaper: DecEx‑RAG: Boosting Agentic Retrieval‑Augmented Generation with Decision and Execution Optimization via Process Supervision — Leng et al., 2025 — [arXiv](https://arxiv.org/abs/2510.05691) · [HTML](https://arxiv.org/html/2510.05691v1)\n\nI instrumented my scaffold to log state → action → observation for each retrieve/rewrite/answer step, then trained a tiny critic that scores those steps post‑hoc. Even a simple linear reward model nudged the agent away from wasteful branches (e.g., redundant query expansions) and toward sequences that produced faithful answers with less context.\n\n---\n\n## 4) Small models as the default brain\n\nThis one is more of an argument than a result, but it hit home: Belčák (2025) makes the case that Small Language Models (&lt;10B) should drive most agent workloads, with a bigger LLM reserved for the rare, ambiguous synthesis step. If your agent spends 80% of its life searching, filtering, formatting, filling forms, a small model plus sharp tools beats a giant model plus vibes.\n\nPosition paper: Small Language Models are the Future of Agentic AI — Belčák, 2025 — [arXiv](https://arxiv.org/abs/2506.02153) · [PDF](https://arxiv.org/pdf/2506.02153) · Overview: [NVIDIA Labs](https://research.nvidia.com/labs/lpr/slm-agents/)\n\nI rewired the runtime: a 7–13B model handles tool calls and browsing, and I escalate to a larger model only when my critics disagree or confidence is low. Costs dropped; latency tails shrank; nobody missed the extra parameter count.\n\n---\n\n## 5) If your agent browses, give it a real test\n\nI used to evaluate browsing by watching a few demos. Then BrowseComp arrived: 1,266 questions that force multi‑page reading, reformulation, and patience. It’s nasty in a good way. Accuracy scales with test‑time compute, which is exactly what we need to tune planning policies.\n\nBenchmark: BrowseComp: A Simple Yet Challenging Benchmark for Browsing Agents — Wei et al., OpenAI, 2025 — [blog](https://openai.com/index/browsecomp/) · [paper PDF](https://cdn.openai.com/pdf/5e10f4ab-d6f7-442e-9508-59515c65e35d/browsecomp.pdf) · [arXiv](https://arxiv.org/pdf/2504.12516)\n\nI set a compute schedule (3, 6, 12 page loads/tool calls) and plotted accuracy vs. budget. The curve told me where my agent was too cautious (premature stopping) and where it was lost (looping on the wrong site). A single planning tweak—“when in doubt, reformulate once, then broaden”—bought me nine points.\n\nRelated: OpenAI later reported 68.9% with the ChatGPT agent on this benchmark — announcement: [Introducing ChatGPT Agent](https://openai.com/index/introducing-chatgpt-agent/).\n\n---\n\n## 6) Security: no more wishful thinking\n\nFinally, WASP gave me the cold shower I needed. In a sandboxed GitLab/Reddit‑style world, simple human‑written prompt injections frequently pushed agents onto the wrong path (partial success rates up to 86%), even if full attacker goals were rarely completed.\n\nBenchmark: WASP: Benchmarking Web Agent Security Against Prompt Injection Attacks — Evtimov et al., 2025 — [arXiv](https://arxiv.org/abs/2504.18575) · [PDF](https://arxiv.org/pdf/2504.18575) · [code](https://github.com/facebookresearch/wasp)\n\nI added a strict instruction hierarchy (system > developer > page) and tool‑permission gating (writes require explicit elevation). Rerunning WASP made the partial‑success curve drop to something I could live with. Not perfect, but honest.\n\n---\n\n## Bonus: When GraphRAG actually pays off\n\nTwo compact overviews helped me decide when to leave classic RAG:\n\nSurvey: A Survey of Graph Retrieval‑Augmented Generation — Zhang et al., 2025 — [arXiv](https://arxiv.org/abs/2501.13958) · [PDF](https://arxiv.org/pdf/2501.13958)\n\nEvaluation: RAG vs. GraphRAG: A Systematic Evaluation and Key Insights — Han et al., 2025 — [arXiv](https://arxiv.org/abs/2502.11371) · [OpenReview PDF](https://openreview.net/pdf?id=K6N6gCCYcb)\n\nRule of thumb I now use with teams: if the answer depends on entities and relations (incidents→causes→policies; functions→calls→PRs), GraphRAG or a hybrid is worth the added plumbing. If most passages stand alone, classic RAG is simpler and faster.\n\n---\n\n## A short, practical checklist\n\nI’m allergic to long bullet lists, so here’s the only one you’ll see:\n\n- Make top‑k adaptive with a simple noise‑aware controller, and log the choice.\n- Insert a conflict‑resolver micro‑stage (ambiguity + misinformation) before synthesis.\n- Instrument the process (state → action → observation) and supervise steps, not just outcomes.\n- Default to an SLM‑first scaffold; escalate to a big model only on demand.\n- Evaluate browsing on BrowseComp; red‑team the whole stack on WASP.\n\nIf you implement even two of these, you’ll feel the system get quieter and more honest. That’s been the theme of my month: fewer knobs, better rails, and models that seem smarter mostly because the system got sharper.\n",
            "url": "https://example.com/blog/field-notes-2025-ideas",
            "title": "Field Notes: Six 2025 Ideas That Changed How I Build RAG & Agents",
            "summary": "A story-driven tour of new papers and benchmarks—plus what actually moved the needle in my pipelines, with links and practical takeaways.",
            "date_modified": "2025-10-12T00:00:00.000Z",
            "date_published": "2025-10-12T00:00:00.000Z",
            "author": {
                "name": "Nassim Arifette",
                "url": "https://example.com"
            }
        },
        {
            "id": "https://example.com/blog/from-llm-to-agent",
            "content_html": "\nA language model can predict text; an agent can pursue goals. The leap from LLM to agent is architectural, not mystical. In practice, an agent is an LLM wrapped in just enough scaffolding to make decisions, use tools, remember what matters, and stay within clear boundaries.\n\n## What is an agent, precisely?\n\n**Agent = (LLM policy) + (Tools) + (Memory) + (Environment interface) + (Safety constraints).** In my builds, the policy is the brain that chooses what to do next—call a tool, ask a clarifying question, or stop. Tools are plain functions with typed arguments and observable side effects, like search, SQL, code execution, or ticket creation. Memory comes in two flavors: a short rolling window for the current task and a longer-term semantic store you can search. The environment is simply the surfaces the agent can act upon: APIs, files, browsers, terminals, calendars. And safety is the wrapper of budgets, permissions, timeouts, and human-in-the-loop controls that keeps everything on the rails.\n\n## Control flows that actually work\n\nTwo control flows cover most needs for me. With ReAct (Reason + Act), the agent interleaves short thoughts, tool calls, and observations. It stays transparent and you can verify each step. With Plan–Act–Reflect, the agent sketches a plan, executes it step by step, then reflects and patches mistakes. This works well for multi-step tasks and quality-sensitive domains. Either way, I wrap the loop in a tiny state machine so I can bound loops and audit outcomes.\n\n```python\nclass AgentState(Enum):\n    PLAN = 1\n    ACT = 2\n    REFLECT = 3\n    DONE = 4\n```\n\n## A minimal agent loop (typed tools, enforced budgets)\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Callable, Dict, Any, List\n\n@dataclass\nclass Tool:\n    name: str\n    schema: Dict[str, Any]   # JSON schema-like\n    fn: Callable[[Dict[str, Any]], Dict[str, Any]]\n    dangerous: bool = False  # requires explicit permission\n\nTOOLS: Dict[str, Tool] = {...}  # register search, web.get, sql.query, email.send, etc.\n\ndef step(policy_prompt: str, state: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Ask the LLM: propose action {tool_name, args} or FINISH{answer}.\"\"\"\n    return llm_function_call(policy_prompt, tools=[t.schema for t in TOOLS.values()])\n\ndef run_agent(goal: str, max_steps=12, token_budget=8000, cost_budget=1.50):\n    transcript: List[Dict[str, Any]] = []\n    used_tokens = 0\n    cost = 0.0\n    for t in range(max_steps):\n        action = step(render_prompt(goal, transcript), state={})\n        if \"FINISH\" in action:\n            return {\"answer\": action[\"FINISH\"], \"transcript\": transcript}\n        tool = TOOLS[action[\"tool_name\"]]\n        guard(tool, action[\"args\"], budgets=(used_tokens, token_budget, cost, cost_budget))\n        obs = tool.fn(action[\"args\"])\n        transcript.append({\"action\": action, \"observation\": summarize(obs)})\n    return {\"answer\": \"Reached step limit. Provide summary and next steps.\", \"transcript\": transcript}\n```\n\n**Key idea:** the LLM chooses; the runtime enforces. That's how you get reliability.\n\n## Memory that stays useful\n\nI keep episodic memory—the rolling state—short via windowing and summarization so the model stays focused. For longer-term context, I use semantic memory: vector search over previous tasks, docs, and outcomes. When domain entities matter (customers, tickets, invoices), a small structured store (SQLite or a graph) helps. And I separate reads and writes: reads are liberal, but writes either need explicit permission or a human check.\n\n## RAG inside agents\n\nRAG is how agents stay situationally aware. I often add a lightweight query rewrite step so the agent can expand acronyms or add synonyms before retrieving. A single `retrieve` tool can expose strategies like `dense_only`, `sparse_only`, `hybrid`, or `table_lookup`, and the policy picks the right one. After acting, a `verify_with_sources` tool compares the plan and the evidence and flags contradictions before we commit.\n\n## Safety and operational guarantees\n\nOperationally, I set budgets (tokens, time, money), use a capabilities model so risky tools need elevated permission or a human approver, and run code or browsers inside sandboxes with egress controls. I add stop conditions to catch loops (repeated observations, no change in world state) and I log every action and observation so I can attribute decisions after the fact.\n\n## Evaluating agents (beyond demos)\n\nI evaluate agents with a repeatable task suite. I track success rate (did we complete the task to spec), tool accuracy (valid arguments and expected side effects), safety violations (like unauthorized write attempts), latency and cost (median and P95), and human effort (interventions and audit time). I wire this into CI so regressions show up before production.\n\n## Example: an expense-report agent (sketch)\n\nHere's a concrete sketch I like. Goal: file an expense for a trip to SFO ($437.80 hotel, $62.40 meals), attach receipt #8723, and charge cost center 19. The agent plans the steps, reads the receipt with `ocr.read_pdf`, retrieves the company's expense policy with `search.policy` and checks per-diem and receipt rules, drafts the expense, and runs `verify.compliance` to make sure it aligns with policy. If anything is missing, it asks a clarifying question; if not, it calls `erp.create_expense` and returns the created ID with citations to the relevant policy passages.\n\n## LLM vs. RAG vs. Agent: a quick decision table\n\nAs a quick rule of thumb: if you need a one-off completion with no external facts, a plain LLM is fine. If you need grounded answers with citations over your own data, use RAG. If you need multi-step goals with tools, memory, and permissions, you want an agent. If you want grounded knowledge and actions, combine agents with RAG.\n\n## Implementation tips that save weeks\n\nIn practice, I start with schemas: tool JSON contracts that I can validate before calling anything. I prefer small brains and sharp tools—keep the LLM simple and let SQL, search, and math do the heavy lifting. I keep the outer loop deterministic with explicit stop rules and telemetry. When side effects matter (money movement, data deletion), I insert human checkpoints. And I start narrow: one domain, a dozen tasks; once it works, scale breadth.\n\n## Closing thought\n\nRAG turns LLMs into credible researchers. Agents turn them into doers. Both succeed when you treat them as engineered systems, not magic.\n",
            "url": "https://example.com/blog/from-llm-to-agent",
            "title": "From LLM to Agent: Designing Executable Intelligence",
            "summary": "How to wrap language models with tools, memory, and guardrails so they can pursue goals safely.",
            "date_modified": "2025-10-11T00:00:00.000Z",
            "date_published": "2025-10-11T00:00:00.000Z",
            "author": {
                "name": "Nassim Arifette",
                "url": "https://example.com"
            }
        },
        {
            "id": "https://example.com/blog/rag-that-actually-works",
            "content_html": "\nIf you've tried retrieval-augmented generation (RAG) and come away underwhelmed, I get it. Most disappointing RAG systems fail not because the idea is flawed, but because the pipeline is. The good news: reliable RAG is absolutely attainable with a handful of rigorous design choices and disciplined evaluation.\n\n## What RAG is (and isn't)\n\nRAG grounds a language model's output in an external knowledge base. Instead of asking the model to remember everything, we retrieve small, relevant pieces of evidence and ask the model to synthesize an answer from those. It's not a silver bullet for reasoning and it doesn't replace domain logic or data governance. Think of it as a retrieval system glued to a generator. Both halves need engineering.\n\n## A reference architecture\n\n```\nUser -> Query Preprocessor\n     -> Hybrid Retriever (sparse BM25 + dense ANN)\n     -> Cross-Encoder Re-ranker\n     -> Context Builder (cite + compress)\n     -> LLM Generator (instruction + evidence)\n     -> Verifier / Guardrails (optional)\n     -> Answer + Attributions\n     ^ Feedback loop -> Telemetry -> Index Refresh\n```\n\n## Four design decisions that make or break retrieval\n\n### Segmentation (Chunking)\n\nThe goal is simple: maximize the chance that a single chunk fully answers a query. In practice, I start with chunks around 400–800 tokens with 10–20% overlap. I segment along natural structure—headings, list boundaries, table rows—and avoid splitting tables mid-row. Most importantly, I keep artifact IDs (like `doc_id` and `section_id`) to attribute sources and deduplicate later.\n\n### Embeddings\n\nChoose a sentence-level encoder tuned for semantic search; go multilingual if your corpus demands it. Normalize vectors to unit length so cosine similarity reduces to a dot product: $\\cos(\\theta) = \\frac{\\mathbf{a}\\cdot\\mathbf{b}}{\\lVert \\mathbf{a} \\rVert\\,\\lVert \\mathbf{b} \\rVert}$. Watch for index drift over time; when your model or tokenizer changes, re-embed and version the index so experiments remain comparable.\n\n### Hybrid retrieval\n\nDense retrieval excels at synonyms and paraphrase. Sparse BM25 shines on exact terms, numbers, and jargon. I fuse them—often with reciprocal rank fusion (RRF) or a simple weighted sum—then pass the top 100–200 candidates to a re-ranker. This gives you breadth without losing precision.\n\n### Re-ranking\n\nA cross-encoder that scores (query, passage) pairs reliably upgrades result quality, often more than any other single change. Keep the re-ranking depth modest (roughly 50–200) to control latency.\n\n## Make the generator behave\n\nInstructioning matters. I explicitly tell the model to cite its evidence, avoid fabricating, and say \"insufficient evidence\" when sources don't support an answer. I keep the context tight by stripping boilerplate and lightly compressing passages, and I always display titles and anchors beside each passage. When I can, I ask the model to output a short evidence list (document IDs plus line ranges) so I can spot-check faithfulness automatically.\n\n## Latency and cost budgeting\n\nAs a ballpark: ANN+BM25 retrieval runs around 50–150 ms; a small cross-encoder re-ranker adds about 100–300 ms; generation then dominates depending on the model and output length. Tight prompts, bounded max tokens, caching common answers, and short-circuiting on high-confidence cache hits keep things snappy.\n\n## Evaluating RAG: metrics that matter\n\nI split evaluation into three parts: retrieval, answer quality, and faithfulness.\n\nFor retrieval, I track Recall@k (did a relevant passage land in the top-k?), the mean reciprocal rank $\\text{MRR} = \\frac{1}{|Q|} \\sum_{q \\in Q} \\frac{1}{\\operatorname{rank}_q}$, and the graded metric nDCG@k defined by $\\text{DCG@k} = \\sum_{i=1}^{k} \\frac{\\mathrm{rel}_i}{\\log_2(i+1)}$ and $\\text{nDCG@k} = \\frac{\\text{DCG@k}}{\\text{IDCG@k}}$.\n\nFor answer quality, I use exact match or F1 for factoid queries and a simple rubric (1–5 for correctness, completeness, and citation use) for long-form answers.\n\nFor faithfulness, I pay attention to citation precision (what fraction of cited passages actually support the claim) and the contradiction rate (how often answers conflict with retrieved evidence). I run offline eval on a labeled set and then watch online signals like clicks on cited sources, user edits, and how often the system says \"insufficient evidence.\"\n\n## A minimal, reproducible RAG pipeline (illustrative)\n\n```python\n# 1) Indexing\nfrom sentence_transformers import SentenceTransformer\nimport faiss, numpy as np\n\nembed = SentenceTransformer(\"all-MiniLM-L6-v2\")  # 384-dim\nchunks = [(doc_id, text, metadata) for ...]     # your segmented corpus\nX = embed.encode([c[1] for c in chunks], normalize_embeddings=True)\nindex = faiss.IndexFlatIP(X.shape[1])           # cosine via normalized dot\nindex.add(np.array(X).astype(\"float32\"))\n\n# 2) Query time: hybrid retrieval (pseudo-BM25 + dense)\ndef search(query, k=100):\n    qv = embed.encode([query], normalize_embeddings=True).astype(\"float32\")\n    D, I = index.search(qv, k)                   # dense candidates\n    bm25 = bm25_search(query, k)                 # implement or call your engine\n    candidates = fuse(I[0], bm25)                # e.g., reciprocal rank fusion\n    return [chunks[i] for i in candidates]\n\n# 3) Re-rank top-N with a cross-encoder\nfrom sentence_transformers import CrossEncoder\nreranker = CrossEncoder(\"cross-encoder/ms-marco-MiniLM-L-6-v2\")\n\ndef rerank(query, passages, top_n=8):\n    pairs = [(query, p[1]) for p in passages[:200]]\n    scores = reranker.predict(pairs)\n    order = np.argsort(scores)[::-1][:top_n]\n    return [passages[i] for i in order]\n\n# 4) Build prompt with citations and call your preferred LLM\ndef build_prompt(query, contexts):\n    blocks = []\n    for j, (doc_id, text, meta) in enumerate(contexts, start=1):\n        blocks.append(f\"[{j}] ({doc_id}) {meta.get('title','')} ::\\n{text}\")\n    evidence = \"\\n\\n\".join(blocks)\n    return f\"\"\"You are a careful analyst. Use only the sources below.\nIf evidence is missing, say 'insufficient evidence'.\n\nQuestion: {query}\n\nSources:\n{evidence}\n\nAnswer with citations like [1], [2].\n\"\"\"\n\ndef answer(query):\n    contexts = rerank(query, search(query))\n    prompt = build_prompt(query, contexts)\n    return llm_complete(prompt)  # plug in your model\n```\n\n## Governance and hardening\n\nTreat RAG like a production system. Enforce access control at retrieval time so tenants never see each other's chunks. Filter PII before indexing. Honor right-to-be-forgotten with tombstones and periodic compaction. Log the full chain—query, retrieved IDs, chosen citations, final answer—so debugging stays tractable. And when recall looks weak or a verifier flags contradictions, fail gracefully with a precise fallback: \"I don't have enough evidence to answer that,\" plus suggestions for where to broaden the search.\n\n## When to choose RAG vs. fine-tuning\n\nReach for RAG when knowledge changes often, you need citations, and governance matters, and you're comfortable with moderate latency. Reach for fine-tuning when patterns are stable, you need a style or format specialization, or you must shave latency. The best systems often combine both: fine-tune the \"how\" of answering, keep the \"what\" grounded with live facts via RAG.\n",
            "url": "https://example.com/blog/rag-that-actually-works",
            "title": "RAG That Actually Works: A Practical, Scientific Guide",
            "summary": "Practical design choices and evaluation tactics that make retrieval-augmented generation reliable.",
            "date_modified": "2025-10-02T22:00:00.000Z",
            "date_published": "2025-10-02T22:00:00.000Z",
            "author": {
                "name": "Nassim Arifette",
                "url": "https://example.com"
            }
        },
        {
            "id": "https://example.com/blog/hello-world",
            "content_html": "\nWelcome to my personal site. It’s built with **Next.js**, **Tailwind**, and **MDX** — statically exported so it runs great on GitHub Pages.\n\n## What you’ll find\n\nI use this space to document things I learn, ship project write-ups, and collect references that help me understand the world a little better.\n\n### Projects\n\nDeep dives on my builds, with architecture diagrams, lessons learned, and plenty of code.\n\n### Notes\n\nLightweight posts for experiments, quick wins, and anything I don’t want to forget.\n\n```ts\nexport function greet(name: string) {\n  return `Hello, ${name}!`\n}\n```\n\nWrite in MDX with components, code blocks, and clean typography.\n",
            "url": "https://example.com/blog/hello-world",
            "title": "Hello, world",
            "summary": "Why I built this site and how it’s organized.",
            "date_modified": "2025-09-26T00:00:00.000Z",
            "date_published": "2025-09-26T00:00:00.000Z",
            "author": {
                "name": "Nassim Arifette",
                "url": "https://example.com"
            }
        }
    ]
}